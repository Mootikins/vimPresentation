======================================================================
||/                                                                \||
||                                                                  ||
||                                                                  ||
||                                                                  ||
||                    __    __) _____ __     __)                    || 
||                   (  |  /   (  /  (  /|  /|                      || 
||                      | /      /     / | / |                      || 
||                      |/   ___/__ ) /  |/  |_                     || 
||                      |  (__ /   (_/   '                          || 
||                                                                  ||
||                                                                  ||
||                        Victory in Modes                          ||
||                                                                  ||
||                                                                  ||
||                                                                  ||
||\                     Use C-D to scroll down                     /||
======================================================================
======================================================================
-------------------------------Why Vim?-------------------------------
======================================================================

----------
Ubiquitous
----------
    Vi, Vim's predecessor, can be found on nearly every *nix system
    and shares much of the same functionality. Many even make the
    Vi command actually run Vim.

----
Fast
----
    Vi's source code was written in the 70s for much slower
    systems, so Vim is, naturally, lightweight. Modernized versions
    like Neovim have added asynchronous processing and the ability to
    script in languages like Perl and Python at the cost of speed.

----------
Extensible
----------
    Vim's scripting language has spawned books and an enormous
    community of plugin writers. If another editor or IDE has
    something that Vim doesn't, you can probably find a plugin
    for it.

---------
Efficient
---------
    Since Vi/Vim is controlled only with the keyboard, less
    time is spent moving your hand to your mouse. Is also more
    ergonomic than Emacs' RSI inducing key combinations.

======================================================================
-----------------------------Vim's Modes------------------------------
======================================================================

----------------
Vim has 5 modes:
----------------
    - Normal (Esc to leave any other mode)
        Single and serial keys perform actions
        Will be denoted with <command>, <C-$> is C-$ in normal mode

    - Insert (Mostly <i>, <a>, <c>, and their capitals)
        Insertion of text, has some Control commands available
        Control commands are shown with [C-$] for C-$

    - Visual (Standard <v>, Line <V> and Block <C-v>)
        Highlights text that can be used by Normal mode commands

    - Command-Line (<:>)
        Allows access to more specific/advanced commands
        Denoted with prefixed colon, eg :wq!

    - Ex-mode (Advanced and mostly integrated into Command Line mode)

======================================================================
-----------------Normal Mode, Movement, and Commands------------------
======================================================================
------------------
Movement commands:
------------------

    - <h>, <j>, <k>, <l> for left, down, up, right respectively

    - <C-u>, <C-d> to move half a page up, down

    - <C-b>, <C-f> to move a full page up, down

    - </{text}>, <?{text}> to search forward/backward for {text}
        - <n> and <N> move to next/previous results

    - <gg>, <G> to move to top, bottom of current file
      <{number}G> to jump to line {number}

    - <0>, <$> to move to beginning, end of line
      <^> for the first non-whitespace character

    - <w> and <b> to move to beginning of next/prev word
        - <W> and <B> are space-separated words

    - <t{char}> and <f{char}> move to/find {char} in same line
        - <T> and <F> do the same backwards
        - <,> and <;> move to next/prev result in line

-----------------
Editing commands:
-----------------

    - <i>, <a>, <I>, <A> to enter Insert mode before/after current
        character/line

    - <ESC> or <C-[> to return to Normal mode from Insert mode

    - <c> changes text, <C> changes until end of line

    - <y> to yank (or copy) text, <yy> or <Y> to yank current line

    - <p> pastes after cursor, <P> pastes before cursor

    - <u> to undo, <C-r> to redo

    - <d> deletes text, <dd> for current line
      (actually moves to {"} reg)

    - <x> to delete character under cursor

    - <.> to repeat last command sentence (extremely useful)

    - <gf> to find file under cursor and open (eg ~/dotfiles/core.vim)

    - < == >  < >> >, < << > auto-indent, indent,
      and un-indent current line; spaces for clarity

    - <:> to enter Command-Line mode

----------------------------
Basic Command-Line commands:
----------------------------

    - :write {directory/filename} to write the current buffer to
        the directory under the given filename (w for short)

    - :quit will quit the current buffer and prompt if you haven't
        saved any changes (q for short, append ! for no save prompt)

    - :edit <directory/filename> will open the given file in a new
        buffer (e for short)

    - Some other useful ones like :vnew and :new (for easier splits),
      :ls (short for :buffers) and :reg (displays registers
      and contents) and :h {query} (without {}, search help)

    - many more advanced commands like search and replace

Many commands in command line have short versions (:write has :w,
:quit has :q) and any others can usually be called by the shortest
substring from their start that makes them unique. So :nohighlight
can be called with :noh

======================================================================
---------------------Understanding Vim's Language---------------------
======================================================================

Vim's commands can be run in a sentence-like structure:
    <{operator}{count}{motion}>

An operator is almost anything referenced in the prior section.

Count is the degree you want to be applied to the motion, and is
optional.

Motion is any command that moves the cursor:
    <t>, <w>, <b>, <e>, <t>/<f>, </>, etc.

    Some others like <i> (inside) and <a> (around) are essential
    for effective editing, but breaks many count commands

    Some operators that act immediately can have a count put on them:
      <i>, <p>, there are many others

--------------------------------
Some sample commands to try out:
--------------------------------
    <c3w> (changes text in the next 3 words)
      Try <c3w> with your cursor on the "c" in "changes", then
      again on "n". Note that it is from the cursor position.

    <di"> (deletes text in pair of quotes and goes into insert mode)
      Try <ci"> in "this pair of quotes". This works with most pairs
      of things, so experiment. You can always undo!

    <"ay3j> (yanks 4 lines down, including current, to register 'a')
      Sample Line 1
      Sample Line 2

    <"a2p> (pastes the text in register 'a' 2 times)

    <c2t.> (change text to second period, inclusive)
      A sample sentence. A second one.

    <5i>TEXT<Esc> (Insert text 5 times once you leave Insert mode)
      Use the above command to type 'Hello_' 5 times

======================================================================
--------------------Registers, or Multi-Clipboards--------------------
======================================================================

One of Vim's most powerful features is registers, which gives you
access to over 20 "clipboards" (some of which are reserved/special).

<"> is used to choose which register you want to use for the following
register-based command.

-------------------------------------------------------------------
Based on this, you have a register for each alphanumeric character.
You can also easily append text to a register.
----------------------------------------------

    <"ayiw> will yank the current word to register a, while
    <"Ayiw> will append the current word to register a

------------------------------------------------
There are also some important special registers:
------------------------------------------------

    '*' is the system clipboard, how you copy/paste between Vim and
        other programs

    '.' is the last inserted text (not per character, but all of the
        text entered on last time you were in Insert mode)

    '%' is the directory path from where Vim was opened to the current
        file

    ':' is the most recently executed Command-Line command

    '_' is the "black hole", essentially equivalent to /dev/null.
        Anything put inside is gone for good, so is good for security

    '#' is the last edited file (the last file written out)

    '0' will always be the most recently yanked text

    '1'-'9' will be the 9 most recent text deletions more than a line

    '-' is any text deletion less than a line, eg 3x

    '/' is your last search term

    '=' a SUPER special, advanced register used for evaluating
        expressions. This one is awesome for macros

======================================================================
--------------------------------Macros--------------------------------
======================================================================
Another of Vim's coolest features is macro recording and editing;
while advanced, it can greatly speed up menial tasks.

<q{register}> will begin recording all your keystrokes until you press q
again, then put it into {register}.

<@{register}> will run the macro in {register}, and <@@> will execute the
last run macro.

The fact that the macros are stored in the registers means that you can 
edit them afterwards if you make any mistakes or even record macros
and save them in another file for later use.

======================================================================
-------------------(Re)Mapping Keys in Config Files-------------------
======================================================================

Vim supports custom config files that allow the mapping and remapping
of commands to any key combination that is not already used.

Vim by default looks for this file in ~/.vimrc, while NeoVim looks in
~/.config/nvim/init.vim (this only applies for Unix/Linux)

======================================================================
------------------------------Questions?------------------------------
======================================================================

If you ever want a refresher, just enter "vimtutor" in your terminal
to get a beginner-friendly tutorial, though it only really covers
the basics.

For more help, never be afraid to use Vim's built in help system. It
can be called by entering Command-Line mode and typing:

    h <search term>

where the search term can be almost anything you are curious about.

In case you forgot to quit this file without saving, type :q! while
in Normal mode.
